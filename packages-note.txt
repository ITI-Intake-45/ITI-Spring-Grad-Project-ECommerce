src
└── main
    ├── java
    │   └── com.example.project-name
    │       ├── config
    │       │   ├── SecurityConfig.java
    │       │   ├── WebConfig.java
    │       │   └── AppConfig.java
    │       │
    │       ├── controller
    │       │   └── UserController.java
    │       │
    │       ├── dto
    │       │   ├── UserDto.java
    │       │   └── AuthRequest.java
    │       │
    │       ├── entity
    │       │   └── User.java
    │       │
    │       ├── exception
    │       │   ├── GlobalExceptionHandler.java
    │       │   └── UserNotFoundException.java
    │       │
    │       ├── mapper
    │       │   └── UserMapper.java
    │       │
    │       ├── repository
    │       │   └── UserRepository.java
    │       │
    │       ├── security
    │       │   ├── JwtAuthenticationFilter.java
    │       │   └── JwtTokenProvider.java
    │       │
    │       ├── service
    │       │   ├── UserService.java
    │       │   └── impl
    │       │       └── UserServiceImpl.java
    │       │
    │       └── ProjectNameApplication.java
    │
    └── resources
        ├── static/
        ├── templates/
        ├── application.properties (or application.yml)
        └── messages.properties








Package	Responsibility
config	Configuration classes (Security, CORS, Swagger, etc.)
controller	REST endpoints (input/output handling)
dto	Data Transfer Objects (API payloads)
entity	JPA entities (database models)
exception	Custom exceptions and global handlers
mapper	MapStruct or manual mappers (Entity ↔ DTO)
repository	Spring Data JPA interfaces
security	JWT filter, provider, and authentication utils
service	Business logic interfaces
service.impl	Implementations of business logic
resources	Static files, templates, and properties


Other Packages?
Yes, it's common to add:

Package	Use Case
util	Helper or utility classes (e.g., validators, file handling, time utilities)
constants	Application-wide constants (e.g., role names, error messages)
enums	Status codes, roles, or other controlled vocabularies
validator	Custom validators for DTO fields (e.g., annotations with @Valid)



Best Practices
General
Use constructor injection (preferred over @Autowired field injection).

Use @Service, @Repository, @Controller stereotypes where appropriate.

Keep your classes small and focused (SRP – Single Responsibility Principle).

Always separate layers: controller → service → repository.

Security
Use a JwtAuthenticationFilter and JwtTokenProvider in the security package.

Define security config clearly using SecurityFilterChain beans in SecurityConfig.

Place custom user details and authentication entry points in the security package.

Testing
Structure tests similarly under src/test/java/com.example.project-name/...

Write unit tests for services and controllers, and integration tests for API endpoints.